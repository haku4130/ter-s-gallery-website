services:
  db:
    image: postgres:14
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env

  backend:
    build: backend
    restart: always
    # command: uv run gunicorn config.wsgi:application --bind 0.0.0.0:8000 --chdir src
    command: >
      sh -c "
        uv run src/manage.py migrate &&
        uv run src/manage.py collectstatic --noinput &&
        uv run src/manage.py loaddata src/fixtures.json &&
        uv run src/manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend/src:/app/src
      - ./backend/pyproject.toml:/app/pyproject.toml
      - ./backend/uv.lock:/app/uv.lock
      - static_volume:/app/src/collected_static
      - media_volume:/app/src/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  frontend:
    build: frontend
    restart: always
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - PROD_BASE_API_URL=${PROD_BASE_API_URL}
    ports:
      - "3000:3000"
      - "4000:4000"

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:
